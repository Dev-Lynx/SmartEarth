<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:SmartEarth.Common.Infrastructure.Resources" 
                    xmlns:Controls="clr-namespace:SmartEarth.Common.Infrastructure.Resources.Controls" 
                    xmlns:Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Classic" 
                    xmlns:Primitives="clr-namespace:Microsoft.Windows.Controls.Ribbon.Primitives;assembly=RibbonControlsLibrary" 
                    xmlns:System="clr-namespace:System;assembly=mscorlib" xmlns:Custom="http://schemas.microsoft.com/winfx/2006/xaml/presentation/ribbon" 
                    xmlns:Shell="clr-namespace:Microsoft.Windows.Shell;assembly=Microsoft.Windows.Shell" 
                    xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes" 
                    xmlns:Converters="clr-namespace:MaterialDesignThemes.Wpf.Converters;assembly=MaterialDesignThemes.Wpf"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="Base.xaml"/>
        <ResourceDictionary Source="Skins/Sky/Skin.xaml"/>
    </ResourceDictionary.MergedDictionaries>
    <!--#region Default Styles-->

    <!--#region SmartEarthRibbon-->
    
    <!--#region Brushes-->
    <!--
    <Setter Property="MouseOverBorderBrush" Value="#FFFFB700"/>
    <Setter Property="MouseOverBackground">
        <Setter.Value>
            <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                <GradientStop Color="#FFFEFBF4" Offset="0"/>
                <GradientStop Color="#FFFDE7CE" Offset="0.19"/>
                <GradientStop Color="#FFFDDEB8" Offset="0.39"/>
                <GradientStop Color="#FFFFCE6B" Offset="0.39"/>
                <GradientStop Color="#FFFFDE9A" Offset="0.79"/>
                <GradientStop Color="#FFFFEBAA" Offset="1"/>
            </LinearGradientBrush>
        </Setter.Value>
    </Setter>
    
    <Setter Property="PressedBackground">
            <Setter.Value>
                <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                    <GradientStop Color="#FFE3C085" Offset="0"/>
                    <GradientStop Color="#FFF4CC89" Offset="0.19"/>
                    <GradientStop Color="#FFF5C777" Offset="0.36"/>
                    <GradientStop Color="#FFF5BB56" Offset="0.36"/>
                    <GradientStop Color="#FFF4CE9A" Offset="0.79"/>
                    <GradientStop Color="#FFF3E28D" Offset="1"/>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
    
    <Setter Property="CheckedBackground">
            <Setter.Value>
                <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                    <GradientStop Color="#FFFFDCA0" Offset="0"/>
                    <GradientStop Color="#FFFFD692" Offset="0.18"/>
                    <GradientStop Color="#FFFFC45D" Offset="0.39"/>
                    <GradientStop Color="#FFFFD178" Offset="1"/>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
    -->
    <!--#endregion-->
    
    <Style TargetType="{x:Type Controls:SmartEarthRibbon}">
        <Style.Resources>
            <PopupAnimation x:Key="{x:Static SystemParameters.MenuPopupAnimationKey}">Fade</PopupAnimation>
        </Style.Resources>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Background" Value="#FFDFE9F5"/>
        <Setter Property="BorderBrush" Value="#FFB9C9DA"/>
        <Setter Property="MouseOverBorderBrush" Value="{DynamicResource IntenseAuxBrush}"/>
        <Setter Property="MouseOverBackground" Value="{DynamicResource MenuMouseOverBackground}"/>
        <Setter Property="PressedBorderBrush" Value="{DynamicResource IntenseAuxBrush}"/>
        <Setter Property="PressedBackground" Value="{DynamicResource MenuPressedBackground}"/>
        <Setter Property="CheckedBorderBrush" Value="{DynamicResource IntenseAuxBrush}"/>
        <Setter Property="CheckedBackground" Value="{DynamicResource MenuCheckedBackground}" />
        <Setter Property="FocusedBorderBrush" Value="#FFFFB700"/>
        <Setter Property="FocusedBackground">
            <Setter.Value>
                <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                    <GradientStop Color="#FFFEFBF4" Offset="0"/>
                    <GradientStop Color="#FFFDE7CE" Offset="0.19"/>
                    <GradientStop Color="#FFFDDEB8" Offset="0.39"/>
                    <GradientStop Color="#FFFFCE6B" Offset="0.39"/>
                    <GradientStop Color="#FFFFDE9A" Offset="0.79"/>
                    <GradientStop Color="#FFFFEBAA" Offset="1"/>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="FontSize" Value="{DynamicResource {x:Static SystemFonts.MenuFontSizeKey}}"/>
        <Setter Property="FontStyle" Value="{DynamicResource {x:Static SystemFonts.MenuFontStyleKey}}"/>
        <Setter Property="FontWeight" Value="{DynamicResource {x:Static SystemFonts.MenuFontWeightKey}}"/>
        <Setter Property="FontFamily" Value="{DynamicResource {x:Static SystemFonts.MenuFontFamilyKey}}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Controls:SmartEarthRibbon}">
                    <Grid SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <Border x:Name="BackgroundBorder" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" Grid.ColumnSpan="3" Grid.Row="1" Grid.RowSpan="3"/>
                        <Border Grid.ColumnSpan="3" Grid.Row="1">
                            <Popup x:Name="PART_ITEMSPRESENTERPOPUP" AllowsTransparency="True" IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}">
                                <Themes:SystemDropShadowChrome x:Name="Shdw" Color="Transparent" RenderOptions.ClearTypeHint="Enabled" FocusVisualStyle="{x:Null}" Focusable="True" Margin="0,0,5,5">
                                    <Border x:Name="CollapsedPopupBackgroundBorder" Background="{DynamicResource Background}">
                                        <ContentControl x:Name="popupItemsPresenterHost" KeyboardNavigation.DirectionalNavigation="Cycle" Focusable="False" Margin="0,1,0,0" KeyboardNavigation.TabNavigation="Cycle"/>
                                    </Border>
                                </Themes:SystemDropShadowChrome>
                            </Popup>
                        </Border>
                        <ContentControl x:Name="mainItemsPresenterHost" Grid.ColumnSpan="3" Focusable="False" Grid.Row="2">
                            <Border x:Name="groupsBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1,0,1,1" Height="91" SnapsToDevicePixels="True">
                                <Border.Background>
                                    <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                        <GradientStop Color="#EEFFFFFF" Offset="0"/>
                                        <GradientStop Color="#BBFFFFFF" Offset="0.1"/>
                                        <GradientStop Color="#05FFFFFF" Offset="0.5"/>
                                        <GradientStop Color="#20FFFFFF" Offset="1"/>
                                    </LinearGradientBrush>
                                </Border.Background>
                                <Border BorderBrush="#60FFFFFF" BorderThickness="0,0,0,1" Margin="0,0,0,1" SnapsToDevicePixels="True">
                                    <ItemsPresenter x:Name="ItemsPresenter"/>
                                </Border>
                            </Border>
                        </ContentControl>
                        <Border x:Name="QatBottomHost" BorderBrush="{TemplateBinding BorderBrush}" Grid.ColumnSpan="3" Grid.Row="3">
                            <ContentPresenter x:Name="QatBottomHostContentPresenter" HorizontalAlignment="Left" IsHitTestVisible="True" VerticalAlignment="Center"/>
                        </Border>
                        <Border x:Name="titleBarBackground" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="0,0,0,1" Grid.ColumnSpan="3" Visibility="Collapsed">
                            <Border.Background>
                                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                    <GradientStop Color="#EEFFFFFF" Offset="0"/>
                                    <GradientStop Color="#BBFFFFFF" Offset="0.1"/>
                                    <GradientStop Color="#05FFFFFF" Offset="0.5"/>
                                    <GradientStop Color="#20FFFFFF" Offset="1"/>
                                </LinearGradientBrush>
                            </Border.Background>
                        </Border>
                        <DockPanel Grid.ColumnSpan="3" Grid.Column="0" Height="{Binding WindowCaptionHeight}" LastChildFill="True">
                            <ContentControl x:Name="windowButtonPlaceHolder" DockPanel.Dock="Right" Focusable="False" IsHitTestVisible="False" Margin="3,0,0,0" Width="{Binding WindowCaptionButtonsLocation.Width}">
                                <ContentControl.Visibility>
                                    <TemplateBinding Property="IsHostedInRibbonWindow" >

                                        <TemplateBinding.Converter>
                                            <BooleanToVisibilityConverter/>
                                        </TemplateBinding.Converter>

                                    </TemplateBinding>
                                </ContentControl.Visibility>
                            </ContentControl>
                            <ContentControl x:Name="windowIconPadding" DockPanel.Dock="Left" Focusable="False" IsHitTestVisible="False" Margin="0,0,3,0" Width="{Binding SmallIconSize.Width}"/>
                            <Primitives:RibbonTitlePanel x:Name="PART_TitlePanel">
                                <Grid x:Name="QatTopHost">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto"/>
                                        <ColumnDefinition Width="*"/>
                                        <ColumnDefinition Width="Auto"/>
                                    </Grid.ColumnDefinitions>
                                    <Border x:Name="QatTopHostLeftBorder" BorderBrush="#66CCCCCC" BorderThickness="1,0,1,0.9" Background="#77222222" Grid.Column="0" CornerRadius="0,0,2,2" Margin="8,2,0,2" Width="3"/>
                                    <ContentPresenter x:Name="QatTopHostContentPresenter" Content="{TemplateBinding QuickAccessToolBar}" Grid.Column="1" IsHitTestVisible="True"/>
                                    <Border x:Name="QatTopHostRightBorder" BorderBrush="#66CCCCCC" BorderThickness="1,0,1,0.9" Background="#77222222" Grid.Column="2" CornerRadius="0,0,2,2" Margin="0,2,1,2" Width="3"/>
                                </Grid>
                                <ContentPresenter x:Name="PART_TitleHost" ContentTemplate="{TemplateBinding TitleTemplate}" Content="{TemplateBinding Title}" ContentSource="Title" TextElement.Foreground="{DynamicResource {x:Static SystemColors.ActiveCaptionTextBrushKey}}" TextElement.FontWeight="{DynamicResource {x:Static SystemFonts.CaptionFontWeightKey}}" TextElement.FontSize="{DynamicResource {x:Static SystemFonts.CaptionFontSizeKey}}" TextElement.FontFamily="{DynamicResource {x:Static SystemFonts.CaptionFontFamilyKey}}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" IsHitTestVisible="False" Margin="3,0" MinWidth="75" MinHeight="{Binding WindowCaptionHeight}">
                                    <ContentPresenter.Resources>
                                        <DataTemplate x:Key="{DataTemplateKey DataType={x:Type System:String}}" DataType="{x:Type System:String}">
                                            <TextBlock x:Name="titleTextBlock" HorizontalAlignment="{TemplateBinding HorizontalAlignment}" Margin="0,-2,0,0" Text="{TemplateBinding Content}" TextTrimming="CharacterEllipsis"/>
                                            <DataTemplate.Triggers>
                                                <MultiDataTrigger>
                                                    <MultiDataTrigger.Conditions>
                                                        <Condition Binding="{Binding IsGlassEnabled}" Value="True"/>
                                                        <Condition Binding="{Binding IsHostedInRibbonWindow, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type Custom:Ribbon}}}" Value="True"/>
                                                    </MultiDataTrigger.Conditions>
                                                    <Setter Property="Effect" TargetName="titleTextBlock">
                                                        <Setter.Value>
                                                            <DropShadowEffect BlurRadius="5" Color="White" ShadowDepth="0"/>
                                                        </Setter.Value>
                                                    </Setter>
                                                </MultiDataTrigger>
                                                <DataTrigger Binding="{Binding IsGlassEnabled}" Value="False">
                                                    <Setter Property="Margin" TargetName="titleTextBlock" Value="0"/>
                                                    <Setter Property="VerticalAlignment" TargetName="titleTextBlock" Value="Center"/>
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding HighContrast}" Value="True">
                                                    <Setter Property="Margin" TargetName="titleTextBlock" Value="0,1,0,0"/>
                                                </DataTrigger>
                                            </DataTemplate.Triggers>
                                        </DataTemplate>
                                    </ContentPresenter.Resources>
                                </ContentPresenter>
                                <Custom:RibbonContextualTabGroupItemsControl x:Name="PART_ContextualTabGroupItemsControl" HorizontalAlignment="Center" IsHitTestVisible="True" Shell:WindowChrome.IsHitTestVisibleInChrome="True"/>
                            </Primitives:RibbonTitlePanel>
                        </DockPanel>
                      
                        <ContentPresenter x:Name="applicationMenu" Content="{TemplateBinding ApplicationMenu}" Margin="3 -10 0 0" Grid.Row="1" Grid.RowSpan="2" VerticalAlignment="Top"/>
                        
                        <Custom:RibbonTabHeaderItemsControl x:Name="TabHeaderItemsControl" Grid.Column="1" HorizontalAlignment="Left" Margin="1,1,1,0" Grid.Row="1" VerticalAlignment="Top"/>
                        <ContentPresenter x:Name="PART_HelpPane" ContentTemplate="{TemplateBinding HelpPaneContentTemplate}" Content="{TemplateBinding HelpPaneContent}" Grid.Column="2" ContentSource="HelpPaneContent" HorizontalAlignment="Right" Grid.Row="1" VerticalAlignment="Top"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsCollapsed" Value="True">
                            <Setter Property="Visibility" TargetName="applicationMenu" Value="Collapsed"/>
                            <Setter Property="Visibility" TargetName="QatBottomHost" Value="Collapsed"/>
                            <Setter Property="Visibility" TargetName="QatTopHost" Value="Collapsed"/>
                            <Setter Property="Visibility" TargetName="mainItemsPresenterHost" Value="Collapsed"/>
                            <Setter Property="Visibility" TargetName="TabHeaderItemsControl" Value="Collapsed"/>
                            <Setter Property="Visibility" TargetName="PART_HelpPane" Value="Collapsed"/>
                            <Setter Property="Visibility" TargetName="PART_ContextualTabGroupItemsControl" Value="Collapsed"/>
                            <Setter Property="MinWidth" TargetName="PART_TitleHost" Value="0"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsCollapsed" Value="True"/>
                                <Condition Property="IsHostedInRibbonWindow" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Visibility" Value="Collapsed"/>
                        </MultiTrigger>
                        <Trigger Property="ShowQuickAccessToolBarOnTop" Value="False">
                            <Setter Property="Content" TargetName="QatTopHostContentPresenter" Value="{x:Null}"/>
                            <Setter Property="Visibility" TargetName="QatTopHost" Value="Collapsed"/>
                            <Setter Property="Content" TargetName="QatBottomHostContentPresenter" Value="{Binding QuickAccessToolBar, RelativeSource={RelativeSource TemplatedParent}}"/>
                            <Setter Property="BorderThickness" TargetName="BackgroundBorder" Value="0,0,0,1"/>
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding QuickAccessToolBar.HasItems, RelativeSource={RelativeSource Self}}" Value="False"/>
                                <Condition Binding="{Binding QuickAccessToolBar.CustomizeMenuButton, RelativeSource={RelativeSource Self}}" Value="{x:Null}"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Visibility" TargetName="QatTopHost" Value="Collapsed"/>
                            <Setter Property="Visibility" TargetName="QatBottomHost" Value="Collapsed"/>
                        </MultiDataTrigger>
                        <Trigger Property="IsMinimized" Value="True">
                            <Setter Property="Content" TargetName="mainItemsPresenterHost" Value="{x:Null}"/>
                            <Setter Property="Visibility" TargetName="mainItemsPresenterHost" Value="Collapsed"/>
                            <Setter Property="Content" TargetName="popupItemsPresenterHost" Value="{Binding ElementName=groupsBorder}"/>
                            <Setter Property="BorderThickness" TargetName="BackgroundBorder" Value="0,0,0,1"/>
                        </Trigger>
                        <Trigger Property="WindowIconVisibility" Value="Collapsed">
                            <Setter Property="Visibility" TargetName="windowIconPadding" Value="Collapsed"/>
                            <Setter Property="Visibility" TargetName="QatTopHostLeftBorder" Value="Collapsed"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMinimized" Value="True"/>
                                <Condition Property="ShowQuickAccessToolBarOnTop" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="BorderThickness" TargetName="QatBottomHost" Value="0,1,0,0"/>
                        </MultiTrigger>
                        <Trigger Property="IsHostedInRibbonWindow" Value="False">
                            <Setter Property="Grid.Row" TargetName="BackgroundBorder" Value="0"/>
                            <Setter Property="Grid.RowSpan" TargetName="BackgroundBorder" Value="4"/>
                            <Setter Property="Visibility" TargetName="titleBarBackground" Value="Visible"/>
                            <Setter Property="Visibility" TargetName="windowIconPadding" Value="Collapsed"/>
                            <Setter Property="Visibility" TargetName="QatTopHostLeftBorder" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="IsDropDownOpen" Value="True">
                            <Setter Property="BorderThickness" TargetName="BackgroundBorder" Value="0"/>
                        </Trigger>
                        <Trigger Property="HasDropShadow" SourceName="PART_ITEMSPRESENTERPOPUP" Value="True">
                            <Setter Property="Color" TargetName="Shdw" Value="#71000000"/>
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsActive, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type Custom:RibbonWindow}}}" Value="False"/>
                                <Condition Binding="{Binding IsGlassEnabled}" Value="False"/>
                                <Condition Binding="{Binding IsHostedInRibbonWindow, RelativeSource={RelativeSource Self}}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="TextElement.Foreground" TargetName="PART_TitleHost" Value="{DynamicResource {x:Static SystemColors.InactiveCaptionTextBrushKey}}"/>
                        </MultiDataTrigger>
                        <DataTrigger Binding="{Binding HighContrast}" Value="True">
                            <Setter Property="Background" TargetName="BackgroundBorder" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                            <Setter Property="BorderBrush" TargetName="BackgroundBorder" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"/>
                            <Setter Property="Background" TargetName="groupsBorder" Value="Transparent"/>
                            <Setter Property="BorderBrush" TargetName="groupsBorder" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"/>
                            <Setter Property="Height" TargetName="groupsBorder" Value="94"/>
                            <Setter Property="BorderBrush" TargetName="QatBottomHost" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"/>
                            <Setter Property="Background" TargetName="titleBarBackground" Value="Transparent"/>
                            <Setter Property="BorderBrush" TargetName="titleBarBackground" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"/>
                            <Setter Property="Background" TargetName="CollapsedPopupBackgroundBorder" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                            <Setter Property="PopupAnimation" TargetName="PART_ITEMSPRESENTERPOPUP" Value="None"/>
                            <Setter Property="Margin" TargetName="QatTopHostLeftBorder" Value="10,1,2,2"/>
                            <Setter Property="Width" TargetName="QatTopHostLeftBorder" Value="1"/>
                            <Setter Property="BorderThickness" TargetName="QatTopHostLeftBorder" Value="0"/>
                            <Setter Property="CornerRadius" TargetName="QatTopHostLeftBorder" Value="0"/>
                            <Setter Property="Background" TargetName="QatTopHostLeftBorder" Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}"/>
                            <Setter Property="Margin" TargetName="QatTopHostRightBorder" Value="0,1,2,2"/>
                            <Setter Property="Width" TargetName="QatTopHostRightBorder" Value="1"/>
                            <Setter Property="BorderThickness" TargetName="QatTopHostRightBorder" Value="0"/>
                            <Setter Property="CornerRadius" TargetName="QatTopHostRightBorder" Value="0"/>
                            <Setter Property="Background" TargetName="QatTopHostRightBorder" Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding UxThemeName}" Value="Aero">
                            <Setter Property="Margin" TargetName="QatTopHost" Value="0,-3,0,0"/>
                            <Setter Property="Margin" TargetName="QatTopHostLeftBorder" Value="3,3,0,5"/>
                            <Setter Property="Background" TargetName="QatTopHostLeftBorder" Value="#81444444"/>
                            <Setter Property="BorderBrush" TargetName="QatTopHostLeftBorder" Value="#69EEEEEE"/>
                            <Setter Property="Margin" TargetName="QatTopHostRightBorder" Value="0,3,1,5"/>
                            <Setter Property="Background" TargetName="QatTopHostRightBorder" Value="#81444444"/>
                            <Setter Property="BorderBrush" TargetName="QatTopHostRightBorder" Value="#69EEEEEE"/>
                        </DataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding UxThemeName}" Value="Aero"/>
                                <Condition Binding="{Binding WindowState, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type Custom:RibbonWindow}}}" Value="Maximized"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Margin" TargetName="QatTopHost" Value="0"/>
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion-->

    
    <!--#region Ribbon Application Menu-->
    <Style TargetType="{x:Type Custom:RibbonApplicationMenu}">
        <Style.Resources>
            <Style TargetType="{x:Type Custom:RibbonSeparator}">
                <Setter Property="OverridesDefaultStyle" Value="True"/>
                <Setter Property="Focusable" Value="False"/>
                <Setter Property="BorderBrush" Value="{Binding Ribbon.BorderBrush, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type Custom:RibbonApplicationMenu}}}"/>
                <Setter Property="Background" Value="{Binding Ribbon.Background, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type Custom:RibbonApplicationMenu}}}"/>
                <Setter Property="FontWeight" Value="Bold"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Custom:RibbonSeparator}">
                            <Border x:Name="MainBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="0,1" Background="{TemplateBinding Background}">
                                <Border x:Name="Overlay">
                                    <Border.Background>
                                        <LinearGradientBrush EndPoint="1,0" StartPoint="0,0">
                                            <GradientStop Color="#A0FFFFFF" Offset="0"/>
                                            <GradientStop Color="#80FFFFFF" Offset="0.4"/>
                                            <GradientStop Color="#0AFFFFFF" Offset="0.8"/>
                                            <GradientStop Color="#08FFFFFF" Offset="1"/>
                                        </LinearGradientBrush>
                                    </Border.Background>
                                    <TextBlock x:Name="Text" Margin="2,1" Text="{TemplateBinding Label}"/>
                                </Border>
                            </Border>
                            <ControlTemplate.Triggers>
                                <DataTrigger Binding="{Binding HighContrast}" Value="True">
                                    <Setter Property="Foreground" TargetName="Text" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"/>
                                    <Setter Property="Background" TargetName="Overlay" Value="Transparent"/>
                                    <Setter Property="BorderBrush" TargetName="MainBorder" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"/>
                                    <Setter Property="Background" TargetName="MainBorder" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                                </DataTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <Trigger Property="Label" Value="{x:Null}">
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type Custom:RibbonSeparator}">
                                    <Grid x:Name="Grid" Margin="1" SnapsToDevicePixels="True">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition SharedSizeGroup="MenuItemIconColumnGroup" Width="Auto"/>
                                            <ColumnDefinition MinWidth="44" Width="*"/>
                                            <ColumnDefinition Width="22"/>
                                        </Grid.ColumnDefinitions>
                                        <Line x:Name="Line" Grid.ColumnSpan="2" Grid.Column="1" Stretch="Fill" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="1" X1="0" X2="1" Y1="0" Y2="0"/>
                                    </Grid>
                                    <ControlTemplate.Triggers>
                                        <DataTrigger Binding="{Binding HighContrast}" Value="True">
                                            <Setter Property="Stroke" TargetName="Line" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                                            <Setter Property="Margin" TargetName="Grid" Value="0"/>
                                        </DataTrigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Trigger>
                </Style.Triggers>
            </Style>
        </Style.Resources>
        <Setter Property="BorderBrush" Value="#FF114EAF"/>
        <Setter Property="Background" Value="#FF114EAF"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Height" Value="40"/>
        <Setter Property="Width" Value="40"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Custom:RibbonApplicationMenu}">
                    <Grid x:Name="OuterGrid" Focusable="False" SnapsToDevicePixels="True">
                        <Custom:RibbonToggleButton x:Name="PART_ToggleButton" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" FocusVisualStyle="{TemplateBinding FocusVisualStyle}" Height="{Binding Height, RelativeSource={RelativeSource TemplatedParent}}" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" LargeImageSource="{TemplateBinding LargeImageSource}" SmallImageSource="{TemplateBinding SmallImageSource}" ToolTipDescription="{TemplateBinding ToolTipDescription}" ToolTipFooterDescription="{TemplateBinding ToolTipFooterDescription}" ToolTipImageSource="{TemplateBinding ToolTipImageSource}" ToolTipFooterTitle="{TemplateBinding ToolTipFooterTitle}" ToolTipFooterImageSource="{TemplateBinding ToolTipFooterImageSource}" ToolTipTitle="{TemplateBinding ToolTipTitle}" Width="{Binding Width, RelativeSource={RelativeSource TemplatedParent}}">
                            <Custom:RibbonToggleButton.Style>
                                <Style TargetType="{x:Type Custom:RibbonToggleButton}">
                                    <Setter Property="BorderBrush" Value="#FF114EAF"/>
                                    <Setter Property="Background" Value="#FF114EAF"/>
                                    <Setter Property="BorderThickness" Value="1"/>
                                    <Setter Property="Foreground">
                                        <Setter.Value>
                                            <RadialGradientBrush>
                                                <GradientStop Color="LightGray" Offset="0"/>
                                                <GradientStop Color="White" Offset="0.4"/>
                                            </RadialGradientBrush>
                                        </Setter.Value>
                                    </Setter>
                                    <Setter Property="ClickMode" Value="Press"/>
                                    <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                                    <Setter Property="FocusManager.IsFocusScope" Value="False"/>
                                    <Setter Property="VerticalAlignment" Value="Bottom"/>
                                    <Setter Property="ToolTipService.InitialShowDelay" Value="900"/>
                                    <Setter Property="ToolTipService.ShowDuration" Value="20000"/>
                                    <Setter Property="ToolTipService.BetweenShowDelay" Value="0"/>
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate TargetType="{x:Type Custom:RibbonToggleButton}">
                                                <Border>
                                                    <Border CornerRadius="20" BorderBrush="{DynamicResource AuxBrush}" BorderThickness="1" Height="{Binding Height, RelativeSource={RelativeSource TemplatedParent}}" SnapsToDevicePixels="True" Width="{Binding Width, RelativeSource={RelativeSource TemplatedParent}}">
                                                        <Grid>
                                                            <StackPanel HorizontalAlignment="Center" Orientation="Horizontal" VerticalAlignment="Center">
                                                                <Image RenderOptions.BitmapScalingMode="HighQuality" RenderOptions.EdgeMode="Aliased" HorizontalAlignment="Center" IsHitTestVisible="False" Source="{Binding LargeImageSource, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type Custom:RibbonApplicationMenu}}}" VerticalAlignment="Center" Width="40" Height="40"/>
                                                            </StackPanel>
                                                            <Border Opacity=".5" x:Name="OuterBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="20" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"/>
                                                            <Border Opacity=".5" x:Name="MiddleBorder" BorderBrush="Transparent" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="20" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                                                                <Border.Background>
                                                                    <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                                                                        <GradientStop Color="#90FFFFFF" Offset="0"/>
                                                                        <GradientStop Color="#30FFFFFF" Offset="0.5"/>
                                                                        <GradientStop Color="Transparent" Offset="0.5"/>
                                                                        <GradientStop Color="#70FFFFFF" Offset="1"/>
                                                                    </LinearGradientBrush>
                                                                </Border.Background>
                                                                <Border Opacity=".5" x:Name="InnerBorder" BorderThickness="1" Background="Transparent" CornerRadius="0,2,0,0">
                                                                    <Border.BorderBrush>
                                                                        <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                                                                            <GradientStop Color="#60FFFFFF" Offset="0"/>
                                                                            <GradientStop Color="#20FFFFFF" Offset="0.5"/>
                                                                            <GradientStop Color="Transparent" Offset="0.5"/>
                                                                            <GradientStop Color="Transparent" Offset="1"/>
                                                                        </LinearGradientBrush>
                                                                    </Border.BorderBrush>
                                                                </Border>
                                                            </Border>
                                                        </Grid>
                                                    </Border>
                                                </Border>

                                                <ControlTemplate.Triggers>
                                                    <MultiTrigger>
                                                        <MultiTrigger.Conditions>
                                                            <Condition Property="IsKeyboardFocused" Value="True"/>
                                                            <Condition Property="IsChecked" Value="False"/>
                                                        </MultiTrigger.Conditions>
                                                        <Setter Property="BorderBrush" TargetName="MiddleBorder" Value="#80FFFFFF"/>
                                                        <Setter Property="Background" TargetName="MiddleBorder">
                                                            <Setter.Value>
                                                                <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                                                                    <GradientStop Color="#A0FFFFFF" Offset="0"/>
                                                                    <GradientStop Color="#60FFFFFF" Offset="0.5"/>
                                                                    <GradientStop Color="Transparent" Offset="0.5"/>
                                                                    <GradientStop Color="#D0FFFFFF" Offset="1"/>
                                                                </LinearGradientBrush>
                                                            </Setter.Value>
                                                        </Setter>
                                                        <Setter Property="BorderBrush" TargetName="InnerBorder">
                                                            <Setter.Value>
                                                                <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                                                                    <GradientStop Color="#90FFFFFF" Offset="0"/>
                                                                    <GradientStop Color="#20FFFFFF" Offset="0.5"/>
                                                                    <GradientStop Color="Transparent" Offset="0.5"/>
                                                                    <GradientStop Color="Transparent" Offset="1"/>
                                                                </LinearGradientBrush>
                                                            </Setter.Value>
                                                        </Setter>
                                                    </MultiTrigger>
                                                    <MultiTrigger>
                                                        <MultiTrigger.Conditions>
                                                            <Condition Property="IsMouseOver" Value="True"/>
                                                            <Condition Property="IsChecked" Value="False"/>
                                                        </MultiTrigger.Conditions>
                                                        <Setter Property="BorderBrush" TargetName="MiddleBorder" Value="#80FFFFFF"/>
                                                        <Setter Property="Background" TargetName="MiddleBorder">
                                                            <Setter.Value>
                                                                <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                                                                    <GradientStop Color="#A0FFFFFF" Offset="0"/>
                                                                    <GradientStop Color="#60FFFFFF" Offset="0.5"/>
                                                                    <GradientStop Color="Transparent" Offset="0.5"/>
                                                                    <GradientStop Color="#D0FFFFFF" Offset="1"/>
                                                                </LinearGradientBrush>
                                                            </Setter.Value>
                                                        </Setter>
                                                        <Setter Property="BorderBrush" TargetName="InnerBorder">
                                                            <Setter.Value>
                                                                <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                                                                    <GradientStop Color="#90FFFFFF" Offset="0"/>
                                                                    <GradientStop Color="#20FFFFFF" Offset="0.5"/>
                                                                    <GradientStop Color="Transparent" Offset="0.5"/>
                                                                    <GradientStop Color="Transparent" Offset="1"/>
                                                                </LinearGradientBrush>
                                                            </Setter.Value>
                                                        </Setter>
                                                    </MultiTrigger>
                                                    <DataTrigger Binding="{Binding HighContrast}" Value="True">
                                                        <Setter Property="BorderBrush" TargetName="OuterBorder" Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}"/>
                                                        <Setter Property="Background" TargetName="OuterBorder" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                                                        <Setter Property="CornerRadius" TargetName="OuterBorder" Value="0"/>
                                                        <Setter Property="BorderBrush" TargetName="MiddleBorder" Value="Transparent"/>
                                                        <Setter Property="Background" TargetName="MiddleBorder" Value="Transparent"/>
                                                        <Setter Property="CornerRadius" TargetName="MiddleBorder" Value="0"/>
                                                        <Setter Property="BorderBrush" TargetName="InnerBorder" Value="Transparent"/>
                                                        <Setter Property="Background" TargetName="InnerBorder" Value="Transparent"/>
                                                        <Setter Property="CornerRadius" TargetName="InnerBorder" Value="0"/>
                                                        <!--
                                                        <Setter Property="Stroke" TargetName="DownArrow" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                                                        <Setter Property="Fill" TargetName="DownArrow" Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}"/>
                                                        -->
                                                    </DataTrigger>
                                                </ControlTemplate.Triggers>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                            </Custom:RibbonToggleButton.Style>
                        </Custom:RibbonToggleButton>
                        <Border x:Name="CenterBorder" HorizontalAlignment="Stretch" Height="1" Margin="-1,-1,0,0" VerticalAlignment="Top"/>
                        <Popup x:Name="PART_Popup" AllowsTransparency="True" IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}" SnapsToDevicePixels="True">
                            <Themes:SystemDropShadowChrome x:Name="Shadow" Color="Transparent" RenderOptions.ClearTypeHint="Enabled" KeyTipService.IsKeyTipScope="True">
                                <Grid>
                                    <Border x:Name="PopupBorder" BorderBrush="{Binding Ribbon.BorderBrush, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type Custom:RibbonMenuButton}}}" BorderThickness="1" Background="{Binding Ribbon.Background, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type Custom:RibbonMenuButton}}}" CornerRadius="2">
                                        <Grid>
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="24"/>
                                                <RowDefinition Height="*"/>
                                                <RowDefinition Height="Auto"/>
                                            </Grid.RowDefinitions>
                                            <Border x:Name="HeaderBorder" BorderBrush="{Binding Ribbon.BorderBrush, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type Custom:RibbonMenuButton}}}" BorderThickness="0,0,0,1" Background="Transparent" CornerRadius="2,2,0,0"/>
                                            <Border x:Name="HeaderOverlayBorder" BorderBrush="#80FFFFFF" BorderThickness="0,0,0,1" CornerRadius="2,2,0,0">
                                                <Border.Background>
                                                    <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                                                        <GradientStop Color="#A0FFFFFF" Offset="0"/>
                                                        <GradientStop Color="#60FFFFFF" Offset="0.5"/>
                                                        <GradientStop Color="Transparent" Offset="0.5"/>
                                                        <GradientStop Color="#D0FFFFFF" Offset="1"/>
                                                    </LinearGradientBrush>
                                                </Border.Background>
                                            </Border>
                                            <Grid Grid.Row="1">
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="Auto"/>
                                                    <ColumnDefinition Width="2"/>
                                                    <ColumnDefinition Width="300"/>
                                                </Grid.ColumnDefinitions>
                                                <Border x:Name="MainPaneBorder" Background="#B8FFFFFF">
                                                    <Grid>
                                                        <Grid.RowDefinitions>
                                                            <RowDefinition Height="Auto"/>
                                                            <RowDefinition/>
                                                            <RowDefinition Height="Auto"/>
                                                        </Grid.RowDefinitions>
                                                        <ScrollViewer x:Name="PART_SubMenuScrollViewer" CanContentScroll="True" Grid.Row="1" Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}}">
                                                            <Grid RenderOptions.ClearTypeHint="Enabled">
                                                                <Canvas x:Name="BackgroundCanvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                                                    <Rectangle x:Name="OpaqueRect" Fill="{Binding Background, ElementName=MainPaneBorder}" Height="{Binding ActualHeight, ElementName=MainPaneBorder}" RadiusY="2" RadiusX="2" Width="{Binding ActualWidth, ElementName=MainPaneBorder}"/>
                                                                    <Rectangle x:Name="OverlayRect" Fill="{Binding Background, ElementName=MainPaneBorder}" Height="{Binding ActualHeight, ElementName=MainPaneBorder}" RadiusY="2" RadiusX="2" Width="{Binding ActualWidth, ElementName=MainPaneBorder}"/>
                                                                </Canvas>
                                                                <ItemsPresenter x:Name="ItemsPresenter" Grid.IsSharedSizeScope="True"/>
                                                            </Grid>
                                                        </ScrollViewer>
                                                        <Border x:Name="ResizeControl" BorderBrush="{Binding Ribbon.BorderBrush, RelativeSource={RelativeSource TemplatedParent}}" BorderThickness="0,1,0,0" Background="#FFE5EFF9" Grid.Row="2" Visibility="Collapsed">
                                                            <Thumb x:Name="PART_ResizeThumb">
                                                                <Thumb.Style>
                                                                    <Style TargetType="{x:Type Thumb}">
                                                                        <Setter Property="Width" Value="11"/>
                                                                        <Setter Property="Height" Value="11"/>
                                                                        <Setter Property="VerticalAlignment" Value="Bottom"/>
                                                                        <Setter Property="HorizontalAlignment" Value="Right"/>
                                                                        <Setter Property="Cursor" Value="SizeNWSE"/>
                                                                        <Setter Property="Template">
                                                                            <Setter.Value>
                                                                                <ControlTemplate TargetType="{x:Type Thumb}">
                                                                                    <Border Background="Transparent">
                                                                                        <Path Data="M9,0L11,0 11,11 0,11 0,9 3,9 3,6 6,6 6,3 9,3z" Margin="0,0,2,2">
                                                                                            <Path.Fill>
                                                                                                <DrawingBrush TileMode="Tile" Viewbox="0,0,3,3" Viewport="0,0,3,3" ViewportUnits="Absolute" ViewboxUnits="Absolute">
                                                                                                    <DrawingBrush.Drawing>
                                                                                                        <DrawingGroup>
                                                                                                            <GeometryDrawing Brush="#FF6C747D" Geometry="M0,0L2,0 2,2 0,2z"/>
                                                                                                        </DrawingGroup>
                                                                                                    </DrawingBrush.Drawing>
                                                                                                </DrawingBrush>
                                                                                            </Path.Fill>
                                                                                        </Path>
                                                                                    </Border>
                                                                                </ControlTemplate>
                                                                            </Setter.Value>
                                                                        </Setter>
                                                                        <Style.Triggers>
                                                                            <Trigger Property="FlowDirection" Value="RightToLeft">
                                                                                <Setter Property="Cursor" Value="SizeNESW"/>
                                                                            </Trigger>
                                                                        </Style.Triggers>
                                                                    </Style>
                                                                </Thumb.Style>
                                                            </Thumb>
                                                        </Border>
                                                    </Grid>
                                                </Border>
                                                <Border x:Name="PART_SubmenuPlaceholder" Background="#80FFFFFF" Grid.Column="2" Height="{Binding ActualHeight, ElementName=MainPaneBorder}">
                                                    <ContentPresenter x:Name="PART_AuxiliaryPaneContentPresenter" ContentTemplate="{TemplateBinding AuxiliaryPaneContentTemplate}" Content="{TemplateBinding AuxiliaryPaneContent}" ContentSource="AuxiliaryPaneContent"/>
                                                </Border>
                                                <Border x:Name="VerticalBorder" BorderBrush="{Binding Ribbon.BorderBrush, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type Custom:RibbonMenuButton}}}" BorderThickness="1,0,0,0" Background="White" Grid.Column="1" HorizontalAlignment="Left" Width="2"/>
                                                <Border x:Name="VerticalOverlayBorder" BorderBrush="#80FFFFFF" BorderThickness="1,0,0,0" Background="Transparent" Grid.Column="1" HorizontalAlignment="Left" Width="2"/>
                                            </Grid>
                                            <Border x:Name="FooterBorder" BorderBrush="{Binding Ribbon.BorderBrush, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type Custom:RibbonMenuButton}}}" BorderThickness="0,1,0,0" Background="Transparent" CornerRadius="0,0,2,2" Grid.Row="2">
                                                <Border x:Name="FooterBackgroundOverlayBorder" BorderBrush="Transparent" CornerRadius="0,0,2,2">
                                                    <Border.Background>
                                                        <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                                                            <GradientStop Color="#A0FFFFFF" Offset="0"/>
                                                            <GradientStop Color="#90FFFFFF" Offset="0.2"/>
                                                            <GradientStop Color="#80FFFFFF" Offset="0.4"/>
                                                            <GradientStop Color="#50FFFFFF" Offset="0.6"/>
                                                            <GradientStop Color="Transparent" Offset="0.8"/>
                                                            <GradientStop Color="#30FFFFFF" Offset="1"/>
                                                        </LinearGradientBrush>
                                                    </Border.Background>
                                                    <ContentPresenter x:Name="PART_FooterPaneContentPresenter" ContentTemplate="{TemplateBinding FooterPaneContentTemplate}" Content="{TemplateBinding FooterPaneContent}" ContentSource="FooterPaneContent" Margin="2" MinHeight="12"/>
                                                </Border>
                                            </Border>
                                            <Border x:Name="FooterOverlayBorder" BorderBrush="#80FFFFFF" BorderThickness="0,1,0,0" Background="Transparent" CornerRadius="0,0,2,2" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"/>
                                        </Grid>
                                    </Border>
                                    <Canvas>
                                        <Custom:RibbonToggleButton x:Name="PART_PopupToggleButton" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Focusable="False" Height="{Binding Height, RelativeSource={RelativeSource TemplatedParent}}" IsChecked="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}" Canvas.Left="3" AutomationProperties.Name="{Binding (AutomationProperties.Name), RelativeSource={RelativeSource TemplatedParent}}" Canvas.Top="-24" Width="{Binding Width, RelativeSource={RelativeSource TemplatedParent}}">
                                            <Custom:RibbonToggleButton.Style>
                                                <Style TargetType="{x:Type Custom:RibbonToggleButton}">
                                                    <Setter Property="BorderBrush" Value="#FF114EAF"/>
                                                    <Setter Property="Background" Value="#FF114EAF"/>
                                                    <Setter Property="BorderThickness" Value="1"/>
                                                    <Setter Property="Foreground">
                                                        <Setter.Value>
                                                            <RadialGradientBrush>
                                                                <GradientStop Color="LightGray" Offset="0"/>
                                                                <GradientStop Color="White" Offset="0.4"/>
                                                            </RadialGradientBrush>
                                                        </Setter.Value>
                                                    </Setter>
                                                    <Setter Property="ClickMode" Value="Press"/>
                                                    <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                                                    <Setter Property="FocusManager.IsFocusScope" Value="False"/>
                                                    <Setter Property="VerticalAlignment" Value="Bottom"/>
                                                    <Setter Property="ToolTipService.InitialShowDelay" Value="900"/>
                                                    <Setter Property="ToolTipService.ShowDuration" Value="20000"/>
                                                    <Setter Property="ToolTipService.BetweenShowDelay" Value="0"/>
                                                    <Setter Property="Template">
                                                        <Setter.Value>
                                                            <ControlTemplate TargetType="{x:Type Custom:RibbonToggleButton}">
                                                                <Grid Height="{Binding Height, RelativeSource={RelativeSource TemplatedParent}}" SnapsToDevicePixels="True" Width="{Binding Width, RelativeSource={RelativeSource TemplatedParent}}">
                                                                    <Border x:Name="OuterBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="0,2,0,0" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"/>
                                                                    <Border x:Name="MiddleBorder" BorderBrush="Transparent" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="0,2,0,0" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                                                                        <Border.Background>
                                                                            <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                                                                                <GradientStop Color="#90FFFFFF" Offset="0"/>
                                                                                <GradientStop Color="#30FFFFFF" Offset="0.5"/>
                                                                                <GradientStop Color="Transparent" Offset="0.5"/>
                                                                                <GradientStop Color="#70FFFFFF" Offset="1"/>
                                                                            </LinearGradientBrush>
                                                                        </Border.Background>
                                                                        <Border x:Name="InnerBorder" BorderThickness="1" Background="Transparent" CornerRadius="0,2,0,0">
                                                                            <Border.BorderBrush>
                                                                                <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                                                                                    <GradientStop Color="#60FFFFFF" Offset="0"/>
                                                                                    <GradientStop Color="#20FFFFFF" Offset="0.5"/>
                                                                                    <GradientStop Color="Transparent" Offset="0.5"/>
                                                                                    <GradientStop Color="Transparent" Offset="1"/>
                                                                                </LinearGradientBrush>
                                                                            </Border.BorderBrush>
                                                                        </Border>
                                                                    </Border>
                                                                    <StackPanel HorizontalAlignment="Center" Orientation="Horizontal" VerticalAlignment="Center">
                                                                        <Image RenderOptions.BitmapScalingMode="HighQuality" RenderOptions.EdgeMode="Aliased" HorizontalAlignment="Center" Width="40" Height="40" IsHitTestVisible="False" Source="{Binding LargeImageSource, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type Custom:RibbonApplicationMenu}}}" VerticalAlignment="Center" />
                                                                    </StackPanel>
                                                                </Grid>
                                                                <ControlTemplate.Triggers>
                                                                    <MultiTrigger>
                                                                        <MultiTrigger.Conditions>
                                                                            <Condition Property="IsKeyboardFocused" Value="True"/>
                                                                            <Condition Property="IsChecked" Value="False"/>
                                                                        </MultiTrigger.Conditions>
                                                                        <Setter Property="BorderBrush" TargetName="MiddleBorder" Value="#80FFFFFF"/>
                                                                        <Setter Property="Background" TargetName="MiddleBorder">
                                                                            <Setter.Value>
                                                                                <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                                                                                    <GradientStop Color="#A0FFFFFF" Offset="0"/>
                                                                                    <GradientStop Color="#60FFFFFF" Offset="0.5"/>
                                                                                    <GradientStop Color="Transparent" Offset="0.5"/>
                                                                                    <GradientStop Color="#D0FFFFFF" Offset="1"/>
                                                                                </LinearGradientBrush>
                                                                            </Setter.Value>
                                                                        </Setter>
                                                                        <Setter Property="BorderBrush" TargetName="InnerBorder">
                                                                            <Setter.Value>
                                                                                <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                                                                                    <GradientStop Color="#90FFFFFF" Offset="0"/>
                                                                                    <GradientStop Color="#20FFFFFF" Offset="0.5"/>
                                                                                    <GradientStop Color="Transparent" Offset="0.5"/>
                                                                                    <GradientStop Color="Transparent" Offset="1"/>
                                                                                </LinearGradientBrush>
                                                                            </Setter.Value>
                                                                        </Setter>
                                                                    </MultiTrigger>
                                                                    <MultiTrigger>
                                                                        <MultiTrigger.Conditions>
                                                                            <Condition Property="IsMouseOver" Value="True"/>
                                                                            <Condition Property="IsChecked" Value="False"/>
                                                                        </MultiTrigger.Conditions>
                                                                        <Setter Property="BorderBrush" TargetName="MiddleBorder" Value="#80FFFFFF"/>
                                                                        <Setter Property="Background" TargetName="MiddleBorder">
                                                                            <Setter.Value>
                                                                                <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                                                                                    <GradientStop Color="#A0FFFFFF" Offset="0"/>
                                                                                    <GradientStop Color="#60FFFFFF" Offset="0.5"/>
                                                                                    <GradientStop Color="Transparent" Offset="0.5"/>
                                                                                    <GradientStop Color="#D0FFFFFF" Offset="1"/>
                                                                                </LinearGradientBrush>
                                                                            </Setter.Value>
                                                                        </Setter>
                                                                        <Setter Property="BorderBrush" TargetName="InnerBorder">
                                                                            <Setter.Value>
                                                                                <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                                                                                    <GradientStop Color="#90FFFFFF" Offset="0"/>
                                                                                    <GradientStop Color="#20FFFFFF" Offset="0.5"/>
                                                                                    <GradientStop Color="Transparent" Offset="0.5"/>
                                                                                    <GradientStop Color="Transparent" Offset="1"/>
                                                                                </LinearGradientBrush>
                                                                            </Setter.Value>
                                                                        </Setter>
                                                                    </MultiTrigger>
                                                                    <DataTrigger Binding="{Binding HighContrast}" Value="True">
                                                                        <Setter Property="BorderBrush" TargetName="OuterBorder" Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}"/>
                                                                        <Setter Property="Background" TargetName="OuterBorder" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                                                                        <Setter Property="CornerRadius" TargetName="OuterBorder" Value="0"/>
                                                                        <Setter Property="BorderBrush" TargetName="MiddleBorder" Value="Transparent"/>
                                                                        <Setter Property="Background" TargetName="MiddleBorder" Value="Transparent"/>
                                                                        <Setter Property="CornerRadius" TargetName="MiddleBorder" Value="0"/>
                                                                        <Setter Property="BorderBrush" TargetName="InnerBorder" Value="Transparent"/>
                                                                        <Setter Property="Background" TargetName="InnerBorder" Value="Transparent"/>
                                                                        <Setter Property="CornerRadius" TargetName="InnerBorder" Value="0"/>
                                                                        <!--
                                                                        <Setter Property="Stroke" TargetName="DownArrow" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                                                                        <Setter Property="Fill" TargetName="DownArrow" Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}"/>
                                                                        -->
                                                                    </DataTrigger>
                                                                </ControlTemplate.Triggers>
                                                            </ControlTemplate>
                                                        </Setter.Value>
                                                    </Setter>
                                                </Style>
                                            </Custom:RibbonToggleButton.Style>
                                        </Custom:RibbonToggleButton>
                                    </Canvas>
                                </Grid>
                            </Themes:SystemDropShadowChrome>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="CanContentScroll" SourceName="PART_SubMenuScrollViewer" Value="False">
                            <Setter Property="Canvas.Top" TargetName="OpaqueRect" Value="{Binding VerticalOffset, ElementName=PART_SubMenuScrollViewer}"/>
                            <Setter Property="Canvas.Left" TargetName="OpaqueRect" Value="{Binding HorizontalOffset, ElementName=PART_SubMenuScrollViewer}"/>
                            <Setter Property="Canvas.Top" TargetName="OverlayRect" Value="{Binding VerticalOffset, ElementName=PART_SubMenuScrollViewer}"/>
                            <Setter Property="Canvas.Left" TargetName="OverlayRect" Value="{Binding HorizontalOffset, ElementName=PART_SubMenuScrollViewer}"/>
                        </Trigger>
                        <Trigger Property="HasGallery" Value="True">
                            <Setter Property="HorizontalScrollBarVisibility" TargetName="PART_SubMenuScrollViewer" Value="Disabled"/>
                            <Setter Property="VerticalScrollBarVisibility" TargetName="PART_SubMenuScrollViewer" Value="Disabled"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="CanUserResizeHorizontally" Value="True"/>
                                <Condition Property="CanUserResizeVertically" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Visibility" TargetName="ResizeControl" Value="Visible"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="CanUserResizeHorizontally" Value="False"/>
                                <Condition Property="CanUserResizeVertically" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Visibility" TargetName="ResizeControl" Value="Visible"/>
                            <Setter Property="Style" TargetName="PART_ResizeThumb">
                                <Setter.Value>
                                    <Style TargetType="{x:Type Thumb}">
                                        <Setter Property="Height" Value="11"/>
                                        <Setter Property="Cursor" Value="SizeNS"/>
                                        <Setter Property="Template">
                                            <Setter.Value>
                                                <ControlTemplate TargetType="{x:Type Thumb}">
                                                    <Border Background="Transparent">
                                                        <Path HorizontalAlignment="Center" Margin="0,0,2,2" VerticalAlignment="Bottom">
                                                            <Path.Data>
                                                                <RectangleGeometry Rect="0,0,11,3"/>
                                                            </Path.Data>
                                                            <Path.Fill>
                                                                <DrawingBrush TileMode="Tile" Viewbox="0,0,3,3" Viewport="0,0,3,3" ViewportUnits="Absolute" ViewboxUnits="Absolute">
                                                                    <DrawingBrush.Drawing>
                                                                        <DrawingGroup>
                                                                            <GeometryDrawing Brush="#FF6C747D" Geometry="M0,0L2,0 2,2 0,2z"/>
                                                                        </DrawingGroup>
                                                                    </DrawingBrush.Drawing>
                                                                </DrawingBrush>
                                                            </Path.Fill>
                                                        </Path>
                                                    </Border>
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                    </Style>
                                </Setter.Value>
                            </Setter>
                        </MultiTrigger>
                        <Trigger Property="IsDropDownPositionedAbove" Value="True">
                            <Setter Property="Grid.Row" TargetName="ResizeControl" Value="0"/>
                            <Setter Property="BorderThickness" TargetName="ResizeControl" Value="0,0,0,1"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsDropDownPositionedAbove" Value="True"/>
                                <Condition Property="CanUserResizeHorizontally" Value="True"/>
                                <Condition Property="CanUserResizeVertically" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Style" TargetName="PART_ResizeThumb">
                                <Setter.Value>
                                    <Style TargetType="{x:Type Thumb}">
                                        <Setter Property="Width" Value="11"/>
                                        <Setter Property="Height" Value="11"/>
                                        <Setter Property="VerticalAlignment" Value="Top"/>
                                        <Setter Property="HorizontalAlignment" Value="Right"/>
                                        <Setter Property="Cursor" Value="SizeNESW"/>
                                        <Setter Property="Template">
                                            <Setter.Value>
                                                <ControlTemplate TargetType="{x:Type Thumb}">
                                                    <Border Background="Transparent">
                                                        <Path Data="M0,0L0,3 3,3 3,6 6,6 6,9 9,9 9,11 11,11 11,0z" Margin="0,2,2,0">
                                                            <Path.Fill>
                                                                <DrawingBrush TileMode="Tile" Viewbox="0,0,3,3" Viewport="0,0,3,3" ViewportUnits="Absolute" ViewboxUnits="Absolute">
                                                                    <DrawingBrush.Drawing>
                                                                        <DrawingGroup>
                                                                            <GeometryDrawing Brush="#FF6C747D" Geometry="M0,0L2,0 2,2 0,2z"/>
                                                                        </DrawingGroup>
                                                                    </DrawingBrush.Drawing>
                                                                </DrawingBrush>
                                                            </Path.Fill>
                                                        </Path>
                                                    </Border>
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                        <Style.Triggers>
                                            <Trigger Property="FlowDirection" Value="RightToLeft">
                                                <Setter Property="Cursor" Value="SizeNWSE"/>
                                            </Trigger>
                                        </Style.Triggers>
                                    </Style>
                                </Setter.Value>
                            </Setter>
                        </MultiTrigger>
                        <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="True">
                            <Setter Property="Margin" TargetName="Shadow" Value="0,0,5,5"/>
                            <Setter Property="Color" TargetName="Shadow" Value="#71000000"/>
                        </Trigger>
                        <Trigger Property="IsOpen" SourceName="PART_Popup" Value="False">
                            <Setter Property="PopupAnimation" TargetName="PART_Popup" Value="None"/>
                        </Trigger>
                        <DataTrigger Binding="{Binding HighContrast}" Value="True">
                            <Setter Property="Visibility" TargetName="BackgroundCanvas" Value="Collapsed"/>
                            <Setter Property="PopupAnimation" TargetName="PART_Popup" Value="None"/>
                            <Setter Property="Color" TargetName="Shadow" Value="Transparent"/>
                            <Setter Property="TextElement.Foreground" TargetName="OuterGrid" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                            <Setter Property="BorderBrush" TargetName="PopupBorder" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                            <Setter Property="Background" TargetName="PopupBorder" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                            <Setter Property="CornerRadius" TargetName="PopupBorder" Value="0"/>
                            <Setter Property="BorderBrush" TargetName="HeaderBorder" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                            <Setter Property="CornerRadius" TargetName="HeaderBorder" Value="0"/>
                            <Setter Property="BorderBrush" TargetName="HeaderOverlayBorder" Value="Transparent"/>
                            <Setter Property="Background" TargetName="HeaderOverlayBorder" Value="Transparent"/>
                            <Setter Property="CornerRadius" TargetName="HeaderOverlayBorder" Value="0"/>
                            <Setter Property="Background" TargetName="MainPaneBorder" Value="Transparent"/>
                            <Setter Property="Background" TargetName="PART_SubmenuPlaceholder" Value="Transparent"/>
                            <Setter Property="BorderBrush" TargetName="VerticalBorder" Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}"/>
                            <Setter Property="Background" TargetName="VerticalBorder" Value="Transparent"/>
                            <Setter Property="BorderBrush" TargetName="VerticalOverlayBorder" Value="Transparent"/>
                            <Setter Property="BorderBrush" TargetName="FooterBorder" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                            <Setter Property="CornerRadius" TargetName="FooterBorder" Value="0"/>
                            <Setter Property="BorderBrush" TargetName="FooterOverlayBorder" Value="Transparent"/>
                            <Setter Property="CornerRadius" TargetName="FooterOverlayBorder" Value="0"/>
                            <Setter Property="Background" TargetName="FooterBackgroundOverlayBorder" Value="Transparent"/>
                            <Setter Property="CornerRadius" TargetName="FooterBackgroundOverlayBorder" Value="0"/>
                            <Setter Property="BorderBrush" TargetName="ResizeControl" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                            <Setter Property="Background" TargetName="ResizeControl" Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsDropDownOpen" Value="True">
                <Setter Property="ToolTipService.IsEnabled" Value="False"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion-->


    <!--#region Expander-->
    <SolidColorBrush x:Key="OptionMark.Static.Background" Color="{Binding Color, Source={StaticResource AuxBrush}}"/>
    <SolidColorBrush x:Key="OptionMark.Static.Border" Color="#FFFFFF"/>
    <Style x:Key="OptionMarkFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="14,0,0,0" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <SolidColorBrush x:Key="OptionMark.MouseOver.Background" Color="{Binding Color, Source={StaticResource AuxBrush}}"/>
    <SolidColorBrush x:Key="OptionMark.MouseOver.Border" Color="{Binding Color, Source={StaticResource FaintAuxBrush}}"/>
    <SolidColorBrush x:Key="OptionMark.MouseOver.Glyph" Color="{Binding Color, Source={StaticResource IntenseAuxBrush}}"/>
    <SolidColorBrush x:Key="OptionMark.Disabled.Background" Color="#FFE6E6E6"/>
    <SolidColorBrush x:Key="OptionMark.Disabled.Border" Color="#FFBCBCBC"/>
    <SolidColorBrush x:Key="OptionMark.Disabled.Glyph" Color="#FF707070"/>
    <SolidColorBrush x:Key="OptionMark.Pressed.Background" Color="{Binding Color, Source={StaticResource AuxBrush}}"/>
    <SolidColorBrush x:Key="OptionMark.Pressed.Border" Color="{Binding Color, Source={StaticResource FaintAuxBrush}}"/>
    <SolidColorBrush x:Key="OptionMark.Pressed.Glyph" Color="{Binding Color, Source={StaticResource IntenseAuxBrush}}"/>
    <SolidColorBrush x:Key="OptionMark.Static.Glyph" Color="{Binding Color, Source={StaticResource FaintAuxBrush}}"/>
    <Style x:Key="RectCheckBox" TargetType="{x:Type CheckBox}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Background" Value="{StaticResource OptionMark.Static.Background}"/>
        <Setter Property="BorderBrush" Value="{StaticResource OptionMark.Static.Border}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Border x:Name="checkBoxBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="1" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                            <Grid x:Name="markGrid">
                                <Path x:Name="optionMark" Data="F1 M 9.97498,1.22334L 4.6983,9.09834L 4.52164,9.09834L 0,5.19331L 1.27664,3.52165L 4.255,6.08833L 8.33331,1.52588e-005L 9.97498,1.22334 Z " Fill="{StaticResource OptionMark.Static.Glyph}" Margin="1" Opacity="0" Stretch="None"/>
                                <Rectangle x:Name="indeterminateMark" Fill="{StaticResource OptionMark.Static.Glyph}" Margin="2" Opacity="0"/>
                            </Grid>
                        </Border>
                        <ContentPresenter x:Name="contentPresenter" Grid.Column="1" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasContent" Value="true">
                            <Setter Property="FocusVisualStyle" Value="{StaticResource OptionMarkFocusVisual}"/>
                            <Setter Property="Padding" Value="4,-1,0,0"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="checkBoxBorder" Value="{StaticResource OptionMark.MouseOver.Background}"/>
                            <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="{StaticResource OptionMark.MouseOver.Border}"/>
                            <Setter Property="Fill" TargetName="optionMark" Value="{StaticResource OptionMark.MouseOver.Glyph}"/>
                            <Setter Property="Fill" TargetName="indeterminateMark" Value="{StaticResource OptionMark.MouseOver.Glyph}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="checkBoxBorder" Value="{StaticResource OptionMark.Disabled.Background}"/>
                            <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="{StaticResource OptionMark.Disabled.Border}"/>
                            <Setter Property="Fill" TargetName="optionMark" Value="{StaticResource OptionMark.Disabled.Glyph}"/>
                            <Setter Property="Fill" TargetName="indeterminateMark" Value="{StaticResource OptionMark.Disabled.Glyph}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="checkBoxBorder" Value="{StaticResource OptionMark.Pressed.Background}"/>
                            <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="{StaticResource OptionMark.Pressed.Border}"/>
                            <Setter Property="Fill" TargetName="optionMark" Value="{StaticResource OptionMark.Pressed.Glyph}"/>
                            <Setter Property="Fill" TargetName="indeterminateMark" Value="{StaticResource OptionMark.Pressed.Glyph}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Opacity" TargetName="optionMark" Value="0"/>
                            <Setter Property="Opacity" TargetName="indeterminateMark" Value="1"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter Property="Opacity" TargetName="optionMark" Value="1"/>
                            <Setter Property="Opacity" TargetName="indeterminateMark" Value="0"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <SolidColorBrush x:Key="Expander.MouseOver.Circle.Stroke" Color="#FF5593FF"/>
    <SolidColorBrush x:Key="Expander.MouseOver.Circle.Fill" Color="#FFF3F9FF"/>
    <SolidColorBrush x:Key="Expander.MouseOver.Arrow.Stroke" Color="#FF000000"/>
    <SolidColorBrush x:Key="Expander.Pressed.Circle.Stroke" Color="#FF3C77DD"/>
    <SolidColorBrush x:Key="Expander.Pressed.Circle.Fill" Color="#FFD9ECFF"/>
    <SolidColorBrush x:Key="Expander.Pressed.Arrow.Stroke" Color="#FF000000"/>
    <SolidColorBrush x:Key="Expander.Disabled.Circle.Stroke" Color="#FFBCBCBC"/>
    <SolidColorBrush x:Key="Expander.Disabled.Circle.Fill" Color="#FFE6E6E6"/>
    <SolidColorBrush x:Key="Expander.Disabled.Arrow.Stroke" Color="#FF707070"/>
    <SolidColorBrush x:Key="Expander.Static.Circle.Fill" Color="#FFFFFFFF"/>
    <SolidColorBrush x:Key="Expander.Static.Circle.Stroke" Color="#FF333333"/>
    <SolidColorBrush x:Key="Expander.Static.Arrow.Stroke" Color="#FF333333"/>
    <Style x:Key="ExpanderRightHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Padding="{TemplateBinding Padding}">
                        <Grid Background="Transparent" SnapsToDevicePixels="False">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="19"/>
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>
                            <Grid>
                                <Grid.LayoutTransform>
                                    <TransformGroup>
                                        <TransformGroup.Children>
                                            <TransformCollection>
                                                <RotateTransform Angle="-90"/>
                                            </TransformCollection>
                                        </TransformGroup.Children>
                                    </TransformGroup>
                                </Grid.LayoutTransform>
                                <Ellipse x:Name="circle" Fill="{StaticResource Expander.Static.Circle.Fill}" HorizontalAlignment="Center" Height="19" Stroke="{StaticResource Expander.Static.Circle.Stroke}" VerticalAlignment="Center" Width="19"/>
                                <Path x:Name="arrow" Data="M 1,1.5 L 4.5,5 L 8,1.5" HorizontalAlignment="Center" SnapsToDevicePixels="false" Stroke="{StaticResource Expander.Static.Arrow.Stroke}" StrokeThickness="2" VerticalAlignment="Center"/>
                            </Grid>
                            <ContentPresenter HorizontalAlignment="Center" Margin="0,4,0,0" Grid.Row="1" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Top"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.MouseOver.Circle.Stroke}"/>
                            <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.MouseOver.Circle.Fill}"/>
                            <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.MouseOver.Arrow.Stroke}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.Pressed.Circle.Stroke}"/>
                            <Setter Property="StrokeThickness" TargetName="circle" Value="1.5"/>
                            <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.Pressed.Circle.Fill}"/>
                            <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Pressed.Arrow.Stroke}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.Disabled.Circle.Stroke}"/>
                            <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.Disabled.Circle.Fill}"/>
                            <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Disabled.Arrow.Stroke}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ExpanderUpHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Padding="{TemplateBinding Padding}">
                        <Grid Background="Transparent" SnapsToDevicePixels="False">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="19"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Grid>
                                <Grid.LayoutTransform>
                                    <TransformGroup>
                                        <TransformGroup.Children>
                                            <TransformCollection>
                                                <RotateTransform Angle="180"/>
                                            </TransformCollection>
                                        </TransformGroup.Children>
                                    </TransformGroup>
                                </Grid.LayoutTransform>
                                <Ellipse x:Name="circle" Fill="{StaticResource Expander.Static.Circle.Fill}" HorizontalAlignment="Center" Height="19" Stroke="{StaticResource Expander.Static.Circle.Stroke}" VerticalAlignment="Center" Width="19"/>
                                <Path x:Name="arrow" Data="M 1,1.5 L 4.5,5 L 8,1.5" HorizontalAlignment="Center" SnapsToDevicePixels="false" Stroke="{StaticResource Expander.Static.Arrow.Stroke}" StrokeThickness="2" VerticalAlignment="Center"/>
                            </Grid>
                            <ContentPresenter Grid.Column="1" HorizontalAlignment="Left" Margin="4,0,0,0" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Center"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.MouseOver.Circle.Stroke}"/>
                            <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.MouseOver.Circle.Fill}"/>
                            <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.MouseOver.Arrow.Stroke}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.Pressed.Circle.Stroke}"/>
                            <Setter Property="StrokeThickness" TargetName="circle" Value="1.5"/>
                            <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.Pressed.Circle.Fill}"/>
                            <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Pressed.Arrow.Stroke}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.Disabled.Circle.Stroke}"/>
                            <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.Disabled.Circle.Fill}"/>
                            <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Disabled.Arrow.Stroke}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ExpanderLeftHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Padding="{TemplateBinding Padding}">
                        <Grid Background="Transparent" SnapsToDevicePixels="False">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="19"/>
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>
                            <Grid>
                                <Grid.LayoutTransform>
                                    <TransformGroup>
                                        <TransformGroup.Children>
                                            <TransformCollection>
                                                <RotateTransform Angle="90"/>
                                            </TransformCollection>
                                        </TransformGroup.Children>
                                    </TransformGroup>
                                </Grid.LayoutTransform>
                                <Ellipse x:Name="circle" Fill="{StaticResource Expander.Static.Circle.Fill}" HorizontalAlignment="Center" Height="19" Stroke="{StaticResource Expander.Static.Circle.Stroke}" VerticalAlignment="Center" Width="19"/>
                                <Path x:Name="arrow" Data="M 1,1.5 L 4.5,5 L 8,1.5" HorizontalAlignment="Center" SnapsToDevicePixels="false" Stroke="{StaticResource Expander.Static.Arrow.Stroke}" StrokeThickness="2" VerticalAlignment="Center"/>
                            </Grid>
                            <ContentPresenter HorizontalAlignment="Center" Margin="0,4,0,0" Grid.Row="1" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Top"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.MouseOver.Circle.Stroke}"/>
                            <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.MouseOver.Circle.Fill}"/>
                            <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.MouseOver.Arrow.Stroke}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.Pressed.Circle.Stroke}"/>
                            <Setter Property="StrokeThickness" TargetName="circle" Value="1.5"/>
                            <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.Pressed.Circle.Fill}"/>
                            <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Pressed.Arrow.Stroke}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.Disabled.Circle.Stroke}"/>
                            <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.Disabled.Circle.Fill}"/>
                            <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Disabled.Arrow.Stroke}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ExpanderHeaderFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border>
                        <Rectangle Margin="0" SnapsToDevicePixels="true" Stroke="Black" StrokeThickness="1" StrokeDashArray="1 2"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ExpanderDownHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Padding="{TemplateBinding Padding}">
                        <Grid Background="Transparent" SnapsToDevicePixels="False">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="19"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Ellipse x:Name="circle" Fill="{StaticResource Expander.Static.Circle.Fill}" HorizontalAlignment="Center" Height="19" Stroke="{StaticResource Expander.Static.Circle.Stroke}" VerticalAlignment="Center" Width="19"/>
                            <Path x:Name="arrow" Data="M 1,1.5 L 4.5,5 L 8,1.5" HorizontalAlignment="Center" SnapsToDevicePixels="false" Stroke="{StaticResource Expander.Static.Arrow.Stroke}" StrokeThickness="2" VerticalAlignment="Center"/>
                            <ContentPresenter Grid.Column="1" HorizontalAlignment="Left" Margin="4,0,0,0" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Center"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.MouseOver.Circle.Stroke}"/>
                            <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.MouseOver.Circle.Fill}"/>
                            <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.MouseOver.Arrow.Stroke}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.Pressed.Circle.Stroke}"/>
                            <Setter Property="StrokeThickness" TargetName="circle" Value="1.5"/>
                            <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.Pressed.Circle.Fill}"/>
                            <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Pressed.Arrow.Stroke}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.Disabled.Circle.Stroke}"/>
                            <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.Disabled.Circle.Fill}"/>
                            <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Disabled.Arrow.Stroke}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="SlideExpander" TargetType="{x:Type Expander}" BasedOn="{x:Null}">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="OverridesDefaultStyle" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Expander}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="3" SnapsToDevicePixels="true">
                        <DockPanel>
                            <CheckBox Style="{StaticResource RectCheckBox}" x:Name="HeaderSite" Content="{TemplateBinding Header}" DockPanel.Dock="Top" Foreground="{TemplateBinding Foreground}" FontWeight="{TemplateBinding FontWeight}" FocusVisualStyle="{StaticResource ExpanderHeaderFocusVisual}" FontStyle="{TemplateBinding FontStyle}" FontStretch="{TemplateBinding FontStretch}" FontSize="{TemplateBinding FontSize}" FontFamily="{TemplateBinding FontFamily}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Margin="0" MinWidth="0" MinHeight="0" Padding="{TemplateBinding Padding}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            <!--<ToggleButton x:Name="ExHeaderSite" ContentTemplate="{TemplateBinding HeaderTemplate}" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" Content="{TemplateBinding Header}" DockPanel.Dock="Top" Foreground="{TemplateBinding Foreground}" FontWeight="{TemplateBinding FontWeight}" FocusVisualStyle="{StaticResource ExpanderHeaderFocusVisual}" FontStyle="{TemplateBinding FontStyle}" FontStretch="{TemplateBinding FontStretch}" FontSize="{TemplateBinding FontSize}" FontFamily="{TemplateBinding FontFamily}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Margin="1" MinWidth="0" MinHeight="0" Padding="{TemplateBinding Padding}" Style="{StaticResource ExpanderDownHeaderStyle}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>-->

                            <ScrollViewer x:Name="ExpanderContentScrollView" DockPanel.Dock="Bottom"
                              HorizontalScrollBarVisibility="Hidden"
                              VerticalScrollBarVisibility="Hidden"
                              HorizontalContentAlignment="Stretch"
                              VerticalContentAlignment="Bottom">
                                <ScrollViewer.Tag>
                                    <sys:Double>0.0</sys:Double>
                                </ScrollViewer.Tag>
                                <ScrollViewer.Height>
                                    <MultiBinding Converter="{StaticResource MultiplyConverter}">
                                        <Binding Path="ActualHeight" ElementName="ExpanderContent"/>
                                        <Binding Path="Tag" RelativeSource="{RelativeSource Self}" />
                                    </MultiBinding>
                                </ScrollViewer.Height>
                                <ContentPresenter x:Name="ExpanderContent" ContentSource="Content"/>
                            </ScrollViewer>

                            <ContentPresenter x:Name="ExpandSite" DockPanel.Dock="Bottom" Focusable="false" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" Visibility="Collapsed" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </DockPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="true">
                            <!--
                            <Setter Property="Visibility" TargetName="ExpandSite" Value="Visible"/>
                            -->
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="ExpanderContentScrollView"
                                                 Storyboard.TargetProperty="Tag"                                                 
                                                 To="1"
                                                 Duration="0:0:0.4"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="ExpanderContentScrollView"
                                                 Storyboard.TargetProperty="Tag"                                                 
                                                 To="0"
                                                 Duration="0:0:0.4"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--#endregion-->

    <!--#endregion-->

    <!--#region Custom Styles-->
    <ControlTemplate x:Key="ContentOnlyTemplate" TargetType="{x:Type Button}">
        <ContentPresenter />
    </ControlTemplate>
    
    

    <Style x:Key="BoldLabel" TargetType="{x:Type Label}">
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="Foreground" Value="{DynamicResource AuxBrush}"/>
        <Setter Property="Opacity" Value=".7"/>
    </Style>

    <Style x:Key="HeadingTextBlock" TargetType="{x:Type TextBlock}">
        <Setter Property="FontSize" Value="{DynamicResource HeadingFontSize}"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="Foreground" Value="{DynamicResource IntenseAuxBrush}"/>
        <Setter Property="Opacity" Value="1"/>
        <Setter Property="TextAlignment" Value="Left"/>
    </Style>

    <Style x:Key="ModalWindow" TargetType="{x:Type Window}">
        <Setter Property="SizeToContent" Value="WidthAndHeight"/>
        <Setter Property="OverridesDefaultStyle" Value="False"/>
        <Setter Property="ResizeMode" Value="NoResize"/>
        <Setter Property="BorderBrush" Value="#00FFFFFF"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="ShowInTaskbar" Value="False"/>
        <Setter Property="Background" Value="#FFFFFF"/>
        <Setter Property="UseLayoutRounding" Value="True"/>
    </Style>

    <Style x:Key="BorderlessTopmostWindow" TargetType="{x:Type Window}">
        <Setter Property="OverridesDefaultStyle" Value="False"/>
        <Setter Property="WindowStyle" Value="None"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="AllowsTransparency" Value="True"/>
        <!--<Setter Property="ShowInTaskbar" Value="False"/>-->
        <Setter Property="Topmost" Value="True"/>
        <Setter Property="SizeToContent" Value="Manual"/>
        <Setter Property="ShowInTaskbar" Value="False"/>
        <Setter Property="Background" Value="#00FFFFFF"/>
    </Style>

    <Style x:Key="ClearImage" TargetType="{x:Type Image}">
        <Setter Property="FlowDirection" Value="LeftToRight"/>
        <Setter Property="RenderOptions.BitmapScalingMode" Value="HighQuality"/>
        <Setter Property="Stretch" Value="Uniform"/>
        <Setter Property="RenderOptions.EdgeMode" Value="Aliased"/>
    </Style>

    <Style x:Key="SlightOpacityTextBlock" TargetType="{x:Type TextBlock}">
        <Setter Property="FontSize" Value="{DynamicResource HeadingFontSize}"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="Foreground" Value="{DynamicResource MainBrush}"/>
        <Setter Property="Opacity" Value=".7"/>
        <Setter Property="TextAlignment" Value="Center"/>
    </Style>

    <!--#region Image Button-->

    <SolidColorBrush x:Key="Button.Static.Background" Color="{Binding Color, Source={StaticResource FaintAuxBrush}}"/>
    <SolidColorBrush x:Key="Button.Static.Border" Color="#FF707070"/>
    <SolidColorBrush x:Key="Button.MouseOver.Background" Color="{Binding Color, Source={StaticResource AuxBrush}}"/>
    <!--
    <SolidColorBrush x:Key="Button.MouseOver.Background" Color="#FFBEE6FD"/>
    <SolidColorBrush x:Key="Button.Pressed.Background" Color="#FFC4E5F6"/>
    -->

    <SolidColorBrush x:Key="Button.MouseOver.Border" Color="#FF3C7FB1"/>
    <SolidColorBrush x:Key="Button.Pressed.Background" Color="{Binding Color, Source={StaticResource IntenseAuxBrush}}"/>
    <SolidColorBrush x:Key="Button.Pressed.Border" Color="#FF2C628B"/>
    <SolidColorBrush x:Key="Button.Disabled.Background" Color="#FFF4F4F4"/>
    <SolidColorBrush x:Key="Button.Disabled.Border" Color="#FFADB2B5"/>
    <SolidColorBrush x:Key="Button.Disabled.Foreground" Color="#FF838383"/>


    <Style x:Key="FocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="ImageButton" TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Background" Value="#00FFFFFF"/>
        <Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Opacity" Value=".75"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                        <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Opacity" Value=".9"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Opacity" Value="1"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value=".5"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <SolidColorBrush x:Key="ProgressBar.Progress" Color="#FF06B025"/>
    <SolidColorBrush x:Key="ProgressBar.Background" Color="#FFE6E6E6"/>
    <SolidColorBrush x:Key="ProgressBar.Border" Color="#FFBCBCBC"/>
    <Style x:Key="RoundedProgressBar" TargetType="{x:Type ProgressBar}">
        <Setter Property="Foreground" Value="{StaticResource ProgressBar.Progress}"/>
        <Setter Property="Background" Value="{StaticResource ProgressBar.Background}"/>
        <Setter Property="BorderBrush" Value="{StaticResource ProgressBar.Border}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ProgressBar}">
                    <Grid x:Name="TemplateRoot">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Determinate"/>
                                <VisualState x:Name="Indeterminate">
                                    <Storyboard RepeatBehavior="Forever">
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="Animation">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="0.25"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:1" Value="0.25"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:2" Value="0.25"/>
                                        </DoubleAnimationUsingKeyFrames>
                                        <PointAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransformOrigin)" Storyboard.TargetName="Animation">
                                            <EasingPointKeyFrame KeyTime="0" Value="-0.5,0.5"/>
                                            <EasingPointKeyFrame KeyTime="0:0:1" Value="0.5,0.5"/>
                                            <EasingPointKeyFrame KeyTime="0:0:2" Value="1.5,0.5"/>
                                        </PointAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}"/>
                        <Rectangle x:Name="PART_Track"/>
                        <Grid x:Name="PART_Indicator" ClipToBounds="true" HorizontalAlignment="Left">
                            <Rectangle x:Name="Indicator" Fill="{TemplateBinding Foreground}" RadiusX="15" RadiusY="15"/>
                            <Rectangle x:Name="Animation" Fill="{TemplateBinding Foreground}" RadiusX="15" RadiusY="15" RenderTransformOrigin="0.5,0.5">
                                <Rectangle.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform/>
                                        <SkewTransform/>
                                        <RotateTransform/>
                                        <TranslateTransform/>
                                    </TransformGroup>
                                </Rectangle.RenderTransform>
                            </Rectangle>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Orientation" Value="Vertical">
                            <Setter Property="LayoutTransform" TargetName="TemplateRoot">
                                <Setter.Value>
                                    <RotateTransform Angle="-90"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsIndeterminate" Value="true">
                            <Setter Property="Visibility" TargetName="Indicator" Value="Collapsed"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion-->

    <!--#endregion-->
    
    <!--#region Custom ControlTemplates-->
    <ControlTemplate x:Key="HorizontalWaitAnimation" TargetType="Control">
        <ControlTemplate.Resources>
            <Storyboard x:Key="Animation0" BeginTime="00:00:00" RepeatBehavior="Forever">
                <DoubleAnimationUsingKeyFrames Duration="00:00:01.1" Storyboard.TargetName="ellipse0"  Storyboard.TargetProperty="(Shape.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00" Value="1"/>
                    <SplineDoubleKeyFrame KeyTime="00:00:00.6" Value=".7"/>
                    <SplineDoubleKeyFrame KeyTime="00:00:01" Value=".5"/>
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>

            <Storyboard x:Key="Animation1" BeginTime="00:00:00" RepeatBehavior="Forever">
                <DoubleAnimationUsingKeyFrames Duration="00:00:01.1" Storyboard.TargetName="ellipse1"  Storyboard.TargetProperty="(Shape.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00" Value=".5"/>
                    <SplineDoubleKeyFrame KeyTime="00:00:00.6" Value="1"/>
                    <SplineDoubleKeyFrame KeyTime="00:00:01" Value=".7"/>
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>

            <Storyboard x:Key="Animation2" BeginTime="00:00:00" RepeatBehavior="Forever">
                <DoubleAnimationUsingKeyFrames Duration="00:00:01.1" Storyboard.TargetName="ellipse2"  Storyboard.TargetProperty="(Shape.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00" Value=".7"/>
                    <SplineDoubleKeyFrame KeyTime="00:00:00.6" Value=".5"/>
                    <SplineDoubleKeyFrame KeyTime="00:00:01" Value="1"/>
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>

            <Style TargetType="Ellipse">
                <Setter Property="Width" Value="100"/>
                <Setter Property="Height" Value="100" />
                <Setter Property="Margin" Value="10"/>
                <Setter Property="Fill" Value="{DynamicResource AuxBrush}" />
            </Style>
        </ControlTemplate.Resources>

        <ControlTemplate.Triggers>
            <Trigger Property="IsVisible" Value="True">
                <Trigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource Animation0}" x:Name="StoryBoard0"/>
                    <BeginStoryboard Storyboard="{StaticResource Animation1}" x:Name="StoryBoard1"/>
                    <BeginStoryboard Storyboard="{StaticResource Animation2}" x:Name="StoryBoard2"/>
                </Trigger.EnterActions>

                <Trigger.ExitActions>
                    <StopStoryboard BeginStoryboardName="StoryBoard0"/>
                    <StopStoryboard BeginStoryboardName="StoryBoard1"/>
                    <StopStoryboard BeginStoryboardName="StoryBoard2"/>
                </Trigger.ExitActions>
            </Trigger>
        </ControlTemplate.Triggers>

        <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>

                <Ellipse x:Name="ellipse0"/>
                <Ellipse x:Name="ellipse1" Grid.Column="1" />
                <Ellipse x:Name="ellipse2" Grid.Column="2"/>
            </Grid>
        </Border>
    </ControlTemplate>

    <ControlTemplate x:Key="EllipseStaller" TargetType="{x:Type UserControl}">
        <ControlTemplate.Resources>
            <Storyboard x:Key="Animation0" BeginTime="00:00:00" RepeatBehavior="Forever">
                <DoubleAnimationUsingKeyFrames Duration="00:00:01.1" Storyboard.TargetName="ellipse0"  Storyboard.TargetProperty="(Shape.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00" Value="1"/>
                    <SplineDoubleKeyFrame KeyTime="00:00:00.6" Value=".7"/>
                    <SplineDoubleKeyFrame KeyTime="00:00:01" Value=".5"/>
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>

            <Storyboard x:Key="Animation1" BeginTime="00:00:00" RepeatBehavior="Forever">
                <DoubleAnimationUsingKeyFrames Duration="00:00:01.1" Storyboard.TargetName="ellipse1"  Storyboard.TargetProperty="(Shape.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00" Value=".5"/>
                    <SplineDoubleKeyFrame KeyTime="00:00:00.6" Value="1"/>
                    <SplineDoubleKeyFrame KeyTime="00:00:01" Value=".7"/>
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>

            <Storyboard x:Key="Animation2" BeginTime="00:00:00" RepeatBehavior="Forever">
                <DoubleAnimationUsingKeyFrames Duration="00:00:01.1" Storyboard.TargetName="ellipse2"  Storyboard.TargetProperty="(Shape.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00" Value=".7"/>
                    <SplineDoubleKeyFrame KeyTime="00:00:00.6" Value=".5"/>
                    <SplineDoubleKeyFrame KeyTime="00:00:01" Value="1"/>
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>

            <Style TargetType="Ellipse">
                <Setter Property="Width" Value="30"/>
                <Setter Property="Height" Value="30"/>
                <Setter Property="Stretch" Value="Uniform"/>
                <Setter Property="Margin" Value="0"/>
                <Setter Property="Fill" Value="{DynamicResource AuxBrush}" />
            </Style>
        </ControlTemplate.Resources>


        <ControlTemplate.Triggers>
            <Trigger Property="IsVisible" Value="True">
                <Trigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource Animation0}" x:Name="StoryBoard0"/>
                    <BeginStoryboard Storyboard="{StaticResource Animation1}" x:Name="StoryBoard1"/>
                    <BeginStoryboard Storyboard="{StaticResource Animation2}" x:Name="StoryBoard2"/>
                </Trigger.EnterActions>

                <Trigger.ExitActions>
                    <StopStoryboard BeginStoryboardName="StoryBoard0"/>
                    <StopStoryboard BeginStoryboardName="StoryBoard1"/>
                    <StopStoryboard BeginStoryboardName="StoryBoard2"/>
                </Trigger.ExitActions>
            </Trigger>
        </ControlTemplate.Triggers>

        <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
            <Grid x:Name="WaitGrid" Background="{DynamicResource MainBrush}">
                <Grid.RowDefinitions>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>

                <Border Name="border" Grid.Row="1" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>

                        <Ellipse x:Name="ellipse0" Margin="{TemplateBinding Padding}"/>
                        <Ellipse x:Name="ellipse1" Margin="{TemplateBinding Padding}" Grid.Column="1" />
                        <Ellipse x:Name="ellipse2" Margin="{TemplateBinding Padding}" Grid.Column="2"/>
                    </Grid>
                </Border>
            </Grid>
        </Border>
    </ControlTemplate>

    <ControlTemplate x:Key="WaitableControl" TargetType="{x:Type UserControl}">
        <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
            <Grid>
                <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>


                <Grid x:Name="WaitGrid" Background="{DynamicResource MainBrush}" Visibility="Hidden">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="*"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="*"/>
                    </Grid.RowDefinitions>

                    <Control Grid.Row="1" HorizontalAlignment="Center" Template="{DynamicResource HorizontalWaitAnimation}" />

                    <Grid Margin="0 20 0 0" HorizontalAlignment="Center" VerticalAlignment="Center" Grid.Row="2" ClipToBounds="True">
                        <Grid.Resources>
                            <Storyboard x:Key="FlipItGood" Duration="0:0:2">
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.Y)" Storyboard.TargetName="A">
                                    <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0"/>
                                </DoubleAnimationUsingKeyFrames>
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.Y)" Storyboard.TargetName="B">
                                    <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="20"/>
                                </DoubleAnimationUsingKeyFrames>
                                <DoubleAnimationUsingKeyFrames BeginTime="0:0:3" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.Y)" Storyboard.TargetName="A">
                                    <EasingDoubleKeyFrame KeyTime="0:0:0" Value="-20"/>
                                </DoubleAnimationUsingKeyFrames>
                                <DoubleAnimationUsingKeyFrames BeginTime="0:0:3" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.Y)" Storyboard.TargetName="B">
                                    <EasingDoubleKeyFrame KeyTime="0:0:0" Value="0"/>
                                </DoubleAnimationUsingKeyFrames>
                            </Storyboard>
                        </Grid.Resources>

                        <!--
                        <Grid.Triggers>
                            <EventTrigger RoutedEvent="Binding.TargetUpdated">
                                <BeginStoryboard Storyboard="{StaticResource FlipItGood}"/>
                            </EventTrigger>
                        </Grid.Triggers>
                        -->

                        <TextBlock RenderTransformOrigin="0.5,0.5" Text="{Binding Scheduler.Status}" FontSize="20" Foreground="{DynamicResource AuxBrush}" TextAlignment="Center" FontWeight="Bold" >
                            <TextBlock.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform/>
                                    <SkewTransform/>
                                    <RotateTransform/>
                                    <TranslateTransform/>
                                </TransformGroup>
                            </TextBlock.RenderTransform>

                            <TextBlock.Style>
                                <Style TargetType="TextBlock">
                                    <Style.Triggers>
                                        <EventTrigger RoutedEvent="Binding.TargetUpdated">
                                            <BeginStoryboard>
                                                <Storyboard>
                                                    <DoubleAnimation AccelerationRatio=".3" DecelerationRatio=".3" Storyboard.TargetProperty="Opacity" Duration="0:0:0.2" To="0"/>
                                                    <DoubleAnimation AccelerationRatio=".3" DecelerationRatio=".3" Storyboard.TargetProperty="Opacity" BeginTime="0:0:.2" Duration="0:0:0.2" To="1"/>
                                                </Storyboard>
                                            </BeginStoryboard>
                                        </EventTrigger>
                                    </Style.Triggers>
                                </Style>
                            </TextBlock.Style>
                        </TextBlock>

                        <!--
                        <TextBlock RenderTransformOrigin="0.5,0.5" Text="{Binding Scheduler.Status}" FontSize="20" Foreground="{DynamicResource AuxBrush}" TextAlignment="Center" FontWeight="Bold">
                            <TextBlock.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform/>
                                    <SkewTransform/>
                                    <RotateTransform/>
                                    <TranslateTransform/>
                                </TransformGroup>
                            </TextBlock.RenderTransform>
                        </TextBlock>
                        -->
                    </Grid>
                </Grid>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Scheduler.IsBusy}" Value="True">
                <DataTrigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="WaitGrid" Storyboard.TargetProperty="Visibility">
                                <DiscreteObjectKeyFrame KeyTime="00:00:00" Value="{x:Static Visibility.Visible}"/>
                            </ObjectAnimationUsingKeyFrames>
                            <DoubleAnimation Storyboard.TargetName="WaitGrid" Storyboard.TargetProperty="Opacity" Duration="00:00:0.4" From="0" To="1" AccelerationRatio=".2" DecelerationRatio=".4"/>
                        </Storyboard>
                    </BeginStoryboard>
                </DataTrigger.EnterActions>
                
                <DataTrigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="WaitGrid" Storyboard.TargetProperty="Opacity" Duration="00:00:0.4" From="1" To="0" AccelerationRatio=".2" DecelerationRatio=".4"/>
                            <ObjectAnimationUsingKeyFrames BeginTime="00:00:0.4" Storyboard.TargetName="WaitGrid" Storyboard.TargetProperty="Visibility">
                                <DiscreteObjectKeyFrame KeyTime="00:00:00" Value="{x:Static Visibility.Hidden}"/>
                            </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                    </BeginStoryboard>
                </DataTrigger.ExitActions>
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--#endregion-->
</ResourceDictionary>